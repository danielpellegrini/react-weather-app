{"version":3,"sources":["components/icons/animated/cloudy.svg","components/icons/animated/night.svg","components/weather.js","components/utils.js","App.js","reportWebVitals.js","index.js","components/icons/animated/day.svg"],"names":["module","exports","__webpack_require__","p","CardExampleCard","_ref","weatherData","cityData","react_default","a","createElement","className","locality","moment","format","Math","floor","main","temp","src","require","alt","str","toLowerCase","split","i","length","charAt","toUpperCase","slice","join","titleCase","weather","description","temp_max","temp_min","humidity","Date","sys","sunrise","toLocaleTimeString","hour","minute","sunset","App","_useState","useState","_useState2","Object","slicedToArray","lat","setLat","_useState3","_useState4","long","setLong","_useState5","_useState6","data","setData","_useState7","_useState8","city","setCity","useEffect","asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","concat","process","language","then","res","json","result","console","log","stop","apply","this","arguments","fetchWeatherData","Dimmer","active","Loader","size","reportWebVitals","onPerfEntry","Function","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.b7369fb7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloudy.ad789581.svg\";","module.exports = __webpack_public_path__ + \"static/media/night.a3f3f38d.svg\";","import React from 'react';\nimport './styles.css';\n// import { Button, Card } from 'semantic-ui-react'\nimport moment from 'moment';\nimport { titleCase } from './utils.js';\nimport { toBeRequired } from '@testing-library/jest-dom/dist/matchers';\n\nconst refresh = () => {\n    window.location.reload();\n} \n\nconst CardExampleCard = ({weatherData, cityData}) => (\n    // <div className=\"main card text-bg-dark\" >\n    //     <h1 className=\"header \">{cityData.locality}</h1>\n    //     <Button className=\"button\" inverted color='blue' circular icon='refresh' onClick={refresh} />\n    //     <span>{moment().format('dddd')}</span> | <span>{moment().format('MMM Do YY')}</span>\n    //     <h1>{Math.floor(weatherData.main.temp)}&deg;</h1>\n    //     <p>{titleCase(weatherData.weather[0].description)}</p> \n    //     <p>\n    //         <span>H: {Math.floor(weatherData.main.temp_max)}&deg; </span>\n    //         <span>L: {Math.floor(weatherData.main.temp_min)}&deg;</span>\n    //     </p>\n    //     <p>Humidity: {weatherData.main.humidity}%</p>\n    //     <p>Wind speed: {weatherData.wind.speed} m/s</p>\n    //     <p>Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>\n    //     <p>Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>\n        \n    // </div>\n    <div className=\"main card text-bg-dark\" >\n        <div className='header'>\n            <div className='header-left'>\n                <div className='city'>\n                    <h1>{cityData.locality}</h1>\n                    {/* <Button className=\"button \" inverted color='blue' circular icon='refresh' onClick={refresh} /> */}\n                </div>\n                <div className='date'>\n                    <span className='text-uppercase'>{moment().format('ddd D MMM')}</span>\n                </div>\n                <div className='temperature'>\n                    <h1>{Math.floor(weatherData.main.temp)}&deg;</h1>\n                </div>\n            </div>\n            <div className='header-right'>\n                <div>\n                    <img src={require('./icons/animated/cloudy.svg')} alt=\"\" />\n                </div>\n                <div className='description'>\n                    <p>{titleCase(weatherData.weather[0].description)}</p> \n                </div>\n                <div className='min-max-temperature'>\n                    <span>H: {Math.floor(weatherData.main.temp_max)}&deg; </span>\n                    <span>L: {Math.floor(weatherData.main.temp_min)}&deg;</span>\n                </div>\n                <div>\n                    <p>Humidity: {weatherData.main.humidity}%</p>    \n                </div>\n            </div>\n        </div> \n       \n        <div className='sun-position'>\n            <div className='sunrise'>\n                <img className='sunrise-sun' src={require('./icons/animated/day.svg')} alt=\"\" />\n            </div>\n            <span>Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\n            <div className='sunset'>\n                <img className='sunset-moon' src={require('./icons/animated/night.svg')} alt=\"\" />\n                <img className='sunset-sun' src={require('./icons/animated/day.svg')} alt=\"\" />\n            </div>\n            <span>Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\n        </div>\n        \n    </div>\n    \n)\n\nexport default CardExampleCard;\n\n\n","\nexport function titleCase(str) {\n    str = str.toLowerCase();\n    str = str.split(' ');\n    for(let i = 0; i < str.length; i++) {\n        str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n    }\n    return str.join(' ')\n}\n\n","    import './App.css';\n    import React, { useEffect, useLayoutEffect, useState } from \"react\";\n    import Weather from './components/weather.js';\n    import { Dimmer, Loader } from 'semantic-ui-react'\n    function App() {\n  \n      const [lat, setLat] = useState([]);\n      const [long, setLong] = useState([]);\n      const [data, setData] = useState([]);\n      const [city, setCity] = useState([]);\n\n      useEffect(() => {\n        const fetchWeatherData = async () => {\n          /* get latitude and longitude */\n          navigator.geolocation.getCurrentPosition(function(position) {\n            setLat(position.coords.latitude);\n            setLong(position.coords.longitude);\n          });\n          /* reverse geocoding and getting the exact city with bigdatacloud.com */\n          await fetch(`${process.env.REACT_APP_API_REVERSE_GEOCODING_URL}?latitude=${lat}&longitude=${long}&localityLanguage=${navigator.language.split('-')[0]}`)\n          .then(res => res.json())\n          .then(result => {\n            setCity(result)\n          })\n          /* get weather datas */\n          await fetch(`${process.env.REACT_APP_API_WEATHER_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n          .then(res => res.json())\n          .then(result => {\n            setData(result)\n            console.log(result)\n          })\n          // await fetch(`${process.env.REACT_APP_API_WEATHER_URL}/forecast/?lat=${lat}&lon=${long}&APPID=${process.env.REACT_APP_API_KEY}`)\n          // .then(res => res.json())\n          // .then(result => {\n          //   setData(result)\n          //   console.log(result)\n          // })\n        }\n\n        fetchWeatherData()\n      }, [lat,long])\n\n      return (\n      <div className=\"App\">\n        {/* since the fetch data is an async function, it's mandatory to include this check */}\n        {(typeof data.main != 'undefined') ? \n          (<Weather weatherData={data} cityData={city}/>) : \n          (<div>\n            <Dimmer active>\n              <Loader size=\"big\">Loading...</Loader>\n            </Dimmer>\n          </div>)\n        }\n      </div>\n      // <div className=\"App\">\n      //   {<Weather/>}\n      // </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode> \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/day.7f93fbdb.svg\";"],"sourceRoot":""}